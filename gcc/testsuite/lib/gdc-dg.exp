#   Copyright (C) 2009 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GCC; see the file COPYING3.  If not see
# <http://www.gnu.org/licenses/>.

load_lib gcc-dg.exp

# Not available in GCC 4.6

# Like dg-options, but adds to the default options rather than replacing them.

proc dg-additional-options { args } {
    upvar dg-extra-tool-flags extra-tool-flags

    if { [llength $args] > 3 } {
        error "[lindex $args 0]: too many arguments"
        return
    }

    if { [llength $args] >= 3 } {
        switch [dg-process-target [lindex $args 2]] {
            "S" { eval lappend extra-tool-flags [lindex $args 1] }
            "N" { }
            "F" { error "[lindex $args 0]: `xfail' not allowed here" }
            "P" { error "[lindex $args 0]: `xfail' not allowed here" }
        }
    } else {
        eval lappend extra-tool-flags [lindex $args 1]
    }
}


# Define go callbacks for dg.exp.

proc gdc-dg-test { prog do_what extra_tool_flags } {
    set result \
        [gcc-dg-test-1 gdc_target_compile $prog $do_what $extra_tool_flags]
    
    set comp_output [lindex $result 0]
    set output_file [lindex $result 1]

    return [list $comp_output $output_file]
}

proc gdc-dg-prune { system text } {
    return [gcc-dg-prune $system $text]
}

# Utility routines.

# Modified dg-runtest that can cycle through a list of optimization options
# as c-torture does.
proc gdc-dg-runtest { testcases default-extra-flags } {
    global runtests
    global TORTURE_OPTIONS

    foreach test $testcases {
        # If we're only testing specific files and this isn't one of
        # them, skip it.
        if ![runtest_file_p $runtests $test] {
            continue
        }

        if [expr [search_for $test "dg-do run"]] {
            set flags ""
        } else {
            set flags $TORTURE_OPTIONS
        }

        # Use dg-options if specified
        #dg-options

        set nshort [file tail [file dirname $test]]/[file tail $test]
        verbose "Testing $nshort, $TORTURE_OPTIONS" 1
        dg-test $test $TORTURE_OPTIONS ${default-extra-flags}
    }
}

#
# gdc_load -- wrapper around default gdc_load to handle tests that
# require program arguments passed to them.
#

if { [info procs gdc_load] != [list] \
      && [info procs prev_gdc_load] == [list] } {
    rename gdc_load prev_gdc_load

    proc gdc_load { program args } {
        global EXECUTE_ARGS
        #print "Running: $program $EXECUTE_ARGS $args"
        set result [eval [list prev_gdc_load $program] "$EXECUTE_ARGS $args"]

        return $result
    }
}

