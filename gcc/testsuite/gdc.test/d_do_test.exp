#   Copyright (C) 2000, 2007, 2009, 2010 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GCC; see the file COPYING3.  If not see
# <http://www.gnu.org/licenses/>.

# Test using the DMD testsuite.
# Load support procs.
load_lib gdc-dg.exp
#load_lib gdc.exp

# Convert DMD arguments to GDC equivalent
proc gdc-convert-args { args } {
    set out ""

    if [regexp -- "-c" $args] {
        lappend out "-c"
    }
    if [regexp -- "-d" $args] {
        lappend out "-fdeprecated"
    }
    if [regexp -- "-inline" $args] {
        lappend out "-finline-functions"
    }
    if [regexp -- "-unittest" $args] {
        lappend out "-funittest"
    }
    if [regexp -- "-w" $args] {
        lappend out "-Wall -Werror"
    }

    set i 0
    while { [regexp -start $i -indices -- {-I([\w/-]+)} $args i j] } {
        set i [lindex $j 0]
        set j [lindex $j 1]
        #print "-I[string range $args $i $j]"
        lappend out "-I[string range $args $i $j]"
    }

    set i 0
    while { [regexp -start $i -indices -- {-J([\w/-]+)} $args i j] } { 
        set i [lindex $j 0]
        set j [lindex $j 1]
        #print "-J[string range $args $i $j]" 
        lappend out "-J[string range $args $i $j]"
    }

    set i 0
    while { [regexp -start $i -indices -- {-version=([\w]+)} $args i j] } { 
        set i [lindex $j 0]
        set j [lindex $j 1]
        #print "-J[string range $args $i $j]" 
        lappend out "-fversion=[string range $args $i $j]"
    }
    
    return $out
}

# Translate DMD test directives to dejagnu equivalent.
proc dmd2dg { base test } {
    global DEFAULT_DFLAGS
    global PERMUTE_ARGS

    set PERMUTE_ARGS $DEFAULT_DFLAGS

    # Split base, folder/file.

    set type [file dirname $test]

    # print "Filename: $base - $test"

    set fdin [open $base/$test r]
    #fconfigure $fdin -encoding binary

    file mkdir [file dirname $test]
    set fdout [ open $test w]
    #fconfigure $fdout -encoding binary

    # print "[file dirname $test ]"

    # Add specific options for test type

    # DMD's testsuite is exteremly verbose.
    #  dg-prune-ouput generates pass.
    set out_line "// { dg-prune-output .* }"
    puts $fdout $out_line

    # Compilable files are successful if an output it generated.
    # Fail compilable are successful if an output is not generated.
    # Runnable must compile, link, and return 0 to be successful by default.
    switch [ file dirname $test ] {
        compilable {
            set out_line "// { dg-final { output-exists } }"
            puts $fdout $out_line
        }

        fail_compilation {
            set out_line "// { dg-final { output-exists-not } }"
            puts $fdout $out_line
        }

    }

    while { [gets $fdin copy_line] >= 0 } {
        set out_line $copy_line

        # PERMUTE_ARGS.  Must be handled separately
        if [regexp -- {//\s*PERMUTE_ARGS\s*:\s*(.*)} $copy_line m m0] {
            set PERMUTE_ARGS [gdc-convert-args $m0]
            continue 
        }

        # COMPILE_SEPARATELY. Not handled.
        if [string match "COMPILE_SEPARATELY" $copy_line] {
            set out_line $copy_line
        }

        # POST_SCRIPT. not handled
        if [string match "POST_SCRIPT" $copy_line] {
            error "POST_SCRIPT not handled"
            set out_line $copy_line
        }

        # Can be handled with dg directives.

        # EXECUTE_ARGS.  ???
        if [string match "EXECUTE_ARGS" $copy_line] {
            error "EXECUTE_ARGS not handled"
            set out_line $copy_line
        }

        # Handle EXTRA_SOURCES option
        if [regexp -- {//\s*EXTRA_SOURCES\s*:\s*(.*)} $copy_line m m0] {
            # Iterate imports and convert
            foreach import $m0 {
                # print "Import: $base $type/$import"
                dmd2dg $base "$type/$import"  
            }
            set out_line "// { dg-additional-sources \"$m0\" }"
        }

        # REQUIRED_ARGS.
        if [regexp -- {//\s*REQUIRED_ARGS\s*:\s*(.*)} $copy_line m m0] {
            set out_line "// { dg-additional-options \"[gdc-convert-args $m0]\" }"
        }
        puts $fdout $out_line
    }

    close $fdin
    close $fdout

    return $test 
}

proc gdc-permute-options { options } {
    set result { }
    set n [expr 1<<[llength $options]]
    for { set i 0 } { $i<$n } { incr i } {
        set option ""
        for { set j 0 } { $j<[llength $options] } { incr j } {
            if [expr $i & 1 << $j] {
                append option [lindex $options $j]
                append option " "
            }
        }
        lappend result $option

    }
    return $result
}


proc gdc-do-test { } {
    global TORTURE_OPTIONS
    global srcdir subdir
    global dg-do-what-default
    global verbose

    # If a testcase doesn't have special options, use these.
    global DEFAULT_DFLAGS
    if ![info exists DEFAULT_DFLAGS] then {
        #set DEFAULT_DFLAGS "-g -O2 -funittest -frelease"
        set DEFAULT_DFLAGS "-O2"
    }

    # These are special options to use on testcase, and override DEFAULT_DFLAGS
    global PERMUTE_ARGS

    # Initialize `dg'.
    dg-init

    # Main loop.

    # set verbose 1
    # set dg-final-code ""
    # Find all tests and pass to routine.
    foreach test [lsort [find $srcdir/$subdir *]] {
        regexp -- "(.*)/(.+)/(.+)\.(.+)$" $test match base dir name ext

        # Skip invalid test directory
        if {[lsearch "runnable compilable fail_compilation" $dir] == -1} {
            continue
        }

        # Skip invalid test extensions
        if {[lsearch "d" $ext] == -1} {
            continue
        }

        # Convert to DG test.
        set imports [file dirname $test]
        set imports [format "-I%s -I%s/imports" $imports $imports]
        set filename [dmd2dg $base $dir/$name.$ext]

        set options [gdc-permute-options $PERMUTE_ARGS]

        switch $dir {
            runnable {
                for { set i 0 } { $i<[llength $options] } { incr i } {
                    set TORTURE_OPTIONS [lindex $options $i]
                    set dg-do-what-default "run"
                    gdc-dg-runtest $filename $imports
                }
            }

            compilable {
                for { set i 0 } { $i<[llength $options] } { incr i } {
                    set TORTURE_OPTIONS [lindex $options $i]
                    set dg-do-what-default "assemble"
                    gdc-dg-runtest $filename "$imports"
                }
            }

            fail_compilation {
                for { set i 0 } { $i<[llength $options] } { incr i } {
                    set TORTURE_OPTIONS [lindex $options $i]
                    set dg-do-what-default "compile"
                    gdc-dg-runtest $filename $imports
                }
            }
        }

        # Cleanup
        #file delete $filename
    }

    # All done.
    dg-finish
}

gdc-do-test

