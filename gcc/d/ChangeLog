2012-07-07  Iain Buclaw  <ibuclaw@ubuntu.com>

	* d-lang.cc(saved_reg_names): Remove.
	(d_init): Remove use of saved_reg_names.
	(d_post_options): Likewise.

2012-07-05  Iain Buclaw  <ibuclaw@ubuntu.com>

	* d-glue.cc(StructLiteralExp::toElem): Stop after first assignment for
	constructors built for union types.

2012-07-01  Iain Buclaw  <ibuclaw@ubuntu.com>

	* symbol.h(deferredNestedFuncs): Renamed from otherNestedFuncs, use as
	value type rather than pointer.
	(thunks): Use as value type rather than pointer.
	* d-decls.cc(FuncDeclaration::toSymbol): Remove check for
	deferredNestedFuncs being NULL.
	(FuncDeclaration::toThunkSymbol): Remove check for thunks being NULL.
	* d-glue.cc(DelegateExp::toElem): Remove check for deferredNestedFuncs
	being NULL.
	(FuncDeclaration::toObjFile): Likewise.
	* d-objfile.cc(ObjectFile::shouldEmit): Add nested functions to
	deferredNestedFuncs of their parent function incase parent is actually
	emitted later in during compilation.
	* d-builtins2.cc(d_gcc_type_align): Explicit alignment of variables
	takes precedence over default alignment.
	* d-gcc-includes.h: Re-order list of includes.

2012-06-26  Iain Buclaw  <ibuclaw@ubuntu.com>

	* d-codegen.cc(IRState::twoFieldType): Use rest_of_decl_compilation.
	* d-gcc-includes.h: Remove last of poisoned backend headers.
	* d-glue.cc(FuncDeclaration::toObjFile): Use fprintf for diagnostic
	message.  Use rest_of_decl_compilation directly.
	(SynchronizedStatement::toIR): Likewise.
	(TypeFunction::toCtype): Remove old version1 macro.
	* d-lang.cc(d_parse_file): Remove dependency on backend header. Use
	fprintf for diagnostic messages.
	(nametype): Use rest_of_decl_compilation directly.
	(d_handle_option): Remove version 1 option.
	* dmd-script: Likewise.
	* lang.opt: Likewise.
	* d-objfile.cc(ObjectFile::outputStaticSymbol): Use
	rest_of_decl_compilation directly.
	(ObjectFile::declareType): Likewise.
	(obj_moduleinfo): Likewise.
	(obj_tlssections): Likewise.
	(ObjectFile::outputThunk): Implement new method of thunk generation
	for external symbols using weakref.
	* d-objfile.h(rodc): Remove.

2012-06-25  Iain Buclaw  <ibuclaw@ubuntu.com>

	* d-builtins.c(d_init_builtins): Use build_tree_list to initialise
	void_list_node.
	* d-glue.cc(ArrayLiteralExp::toElem): Always generate code for
	arrayliteralTp.
	(TypeFunction::toCtype): Chain on void_list_node to the end of the
	function type parameters.  Fixes function signatures in debugging.

2012-06-23  Iain Buclaw  <ibuclaw@ubuntu.com>

	* Make-lang.in(d_OBJS): Add so IN_GCC_FRONTEND is defined when
	building gdc sources.
	* d-builtins.c: Remove poisoned headers.
	* d-codegen.cc: Likewise.
	* d-gcc-includes.h: GCC system headers included first, removed
	internally defined macros and poisoned headers.
	* d-gcc-tree.h: Use GCC system headers instead of defining tree_node.
	* d-lang.cc: GCC system headers included first.
	(pushdecl_top_level): Removed.
	* d-objfile.cc: Remove poisoned headers.
	* gdc_alloca.h: Use liberty.h instead of handling include of alloca.

	* d-decls.cc(Dsymbol::toSymbolX): Use snprintf rather than sprintf.
	(FuncDeclaration::toSymbol): Likewise.
	* d-gcc-real.cc(real_t::init): Likewise.
	* symbol.cc(Symbol::Symbol): Use NULL_TREE to initialise tree.
	(symbol_calloc): Use xstrdup to copy string.

	* Make-lang.in: Remove D language version 1 from build
	(_GNU_SOURCE): Removed macro from build.
	(ELFOBJ): Likewise.
	(D_VA_LIST_TYPE_VOIDPTR): Likewise.
	* asmstmt.cc(ExtAsmStatement::semantic): Removed use of V2 macro.
	* d-builtins2.cc(d_gcc_builtin_va_list_d_type): Removed use of
	D_VA_LIST_TYPE_VOIDPTR macro.
	(gcc_type_to_d_type): Likewise.
	(d_gcc_magic_stdarg_check): Likewise.
	(d_gcc_magic_builtins_module): Removed use of V2 macro, and V1
	encapsulated code.
	* d-codegen.cc(IRState::convertTo): Likewise.
	(IRState::toDArray): Likewise.
	(IRState::typesCompatible): Likewise.
	(IRState::arrayBoundsCheck): Likewise.
	(IRState::assertCall): Likewise.
	(libcall_ids): Likewise.
	(IRState::getLibCallDecl): Likewise.
	(IRState::getFrameForSymbol): Likewise.
	(IRState::isFuncNestedIn): Likewise.
	(IRState::buildChain): Likewise.
	(IRState::getFrameInfo): Likewise.
	(IRState::getFrameRef): Likewise.
	(IRState::functionNeedsChain): Likewise.
	(IRState::startCond): Likewise.
	(IRState::exitIfFalse): Likewise.
	(IRState::startCase): Likewise.
	(IRState::doCase): Likewise.
	(IRState::endCase): Likewise.
	* d-decls.cc(VarDeclaration::toSymbol): Likewise
	(FuncDeclaration::toSymbol): Likewise.
	* d-glue.cc(CondExp::toElem): Likewise.
	(build_bool_binop): Likewise.
	(EqualExp::toElem): Likewise.
	(CmpExp::toElem): Likewise.
	(AndAndExp::toElem): Likewise.
	(OrOrExp::toElem): Likewise.
	(AssignExp::toElem): Likewise.
	(CastExp::toElem): Likewise.
	(CallExp::toElem): Likewise.
	(AssertExp::toElem): Likewise.
	(AssocArrayLiteralExp::toElem): Likewise.
	(StructLiteralExp::toElem): Likewise.
	(FuncDeclaration::toObjFile): Likewise.
	(Module::genobjfile): Likewise.
	(TypeFunction::toCtype): Likewise.
	(ThrowStatement::toIR): Likewise.
	(TryCatchStatement::toIR): Likewise.
	(ReturnStatement::toIR): Likewise.
	(SwitchStatement::toIR): Likewise.
	(IfStatement::toIR): Likewise.
	(ForStatement::toIR): Likewise.
	(ExpStatement::toIR): Likewise.
	* d-irstate.cc(IRBase::startFunction): Likewise.
	* d-lang.cc(d_init_options_struct): Likewise.
	(d_handle_option): Likewise.
	(d_parse_file): Likewise.

2012-06-21  Iain Buclaw  <ibuclaw@ubuntu.com>

	* Make-lang.in: Remove d-asm-i386.h
	* asmstmt.cc(d_build_asm_stmt): Update signature, use build5.
	(getFrameRelativeValue): Remove.
	(d_format_priv_asm_label): Likewise.
	(d_have_inline_asm): Likewise.
	(AsmProcessor): Likewise.
	(AsmStatement::toIR): Update sorry message.
	* d-codegen.cc(IRState::expandPortIntrinsic): Update call to
	d_build_asm_stmt.
	(IRState::doAsm): Likewise.
	* d-decls.cc(FuncDeclaration::toSymbol): Remove check for inline asm.
	* d-glue.cc(FuncDeclaration::toObjFile): Likewise.
	(LabelStatement::toIR): 
	* d-lang.cc(VersionCondition::addPredefinedGlobalIdent): Remove D
	Inline Asm version identifiers.
	* d-lang.h(d_build_asm_stmt): Update signature.

2012-06-19  Iain Buclaw  <ibuclaw@ubuntu.com>

	* d-decls.cc(FuncDeclaration::toSymbol): Mark in/out contracts as
	TREE_PUBLIC to allow calling cross-module.
	* d-lang.cc(d_parse_file): Update for 2.059.

2012-06-16  Iain Buclaw  <ibuclaw@ubuntu.com>

	* dfrontend: Merged with DMD 2.059.
	* d-builtins2.cc(gcc_type_to_d_type): Use new frontend value.
	* d-codegen.cc(IRState::getLibCallDecl): Fix return type of _aaDelp.
	(IRState::getVThis): Use frontend provided member to determine if
	function has nested references.
	* d-decl.cc(FuncDeclaration::toSymbol): Weakly pure functions don't
	guarantee no vops.
	* d-gcc-real.cc(max_float_mode): Remove.
	(real_t::convert): Catch imaginary types in conversion.
	* d-glue.cc(EqualExp::toElem): Use memcmp for struct comparisons.
	(CatAssignExp::toElem): Rework order of logic to allow appending
	delegates to an array.
	(DelegateExp::toElem): Implement handling of lambda functions.
	(FuncExp::toElem): Ditto.
	(AssocArrayLiteralExp::toElem): Implement handling of AssociativeArray
	types sent to backend.
	* d-objfile.cc(lmtab): Remove.
	(cvtLocToloc_t): Update implementation.
	(outdata): Now assert that we don't receive error nodes.

2012-06-05  Iain Buclaw  <ibuclaw@ubuntu.com>

	* d-decls.cc(FuncDeclaration::toSymbol): Make better use of 'pure' and
	'pure const' functions in GCC codegen.
	* d-bi-attrs.h: Added TM_ATTR* masks.
	(handle_tm_wrap_attribute, handle_tm_attribute, tm_attr_to_mask,
	find_tm_attribute): New.
	(struct d_common_attribute_table): Added transaction* attributes.

2012-06-04  Iain Buclaw  <ibuclaw@ubuntu.com>

	* d-objfile.cc(ObjectFile::outputThunk): Output thunks moved back to
	the frontend, as backend does not emit them for DECL_EXTERNAL functions.

2012-02-01  Iain Buclaw  <ibuclaw@ubuntu.com>

	* setup-gcc.sh: Remove -hg option.
	* dfrontend/func.c (FuncDeclaration::semantic): Remove code adding
	method to flat list.
	(FuncDeclaration::semantic3): Re-add here.

2012-01-01  Iain Buclaw  <ibuclaw@ubuntu.com>

	* d-builtins2.cc (IRState::buildChain): Don't do nrvo if the
	variable is put in a closure.
	* d-glue.cc (FuncDeclaration::buildClosure): Ditto.
	(ReturnStatement::toIR): Don't call postblit on nrvo returns.
	(DtorExpStatement::toIR): Don't call destructor if var is returned as
	the nrvo variable.

