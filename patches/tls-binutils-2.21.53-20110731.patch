diff -rup binutils-2.21.53-20110731.original//bfd/coff-i386.c binutils-2.21.53-20110731/bfd/coff-i386.c
--- binutils-2.21.53-20110731.original//bfd/coff-i386.c	2011-07-20 15:22:30 -0400
+++ binutils-2.21.53-20110731/bfd/coff-i386.c	2011-12-19 02:34:17 -0500
@@ -528,8 +528,8 @@ coff_i386_rtype_to_howto (abfd, sec, rel
     {
       bfd_vma osect_vma;
 
-      if (h && (h->type == bfd_link_hash_defined
-		|| h->type == bfd_link_hash_defweak))
+      if (h && (h->root.type == bfd_link_hash_defined
+		|| h->root.type == bfd_link_hash_defweak))
 	osect_vma = h->root.u.def.section->output_section->vma;
       else
 	{
diff -rup binutils-2.21.53-20110731.original//bfd/coff-x86_64.c binutils-2.21.53-20110731/bfd/coff-x86_64.c
--- binutils-2.21.53-20110731.original//bfd/coff-x86_64.c	2011-06-05 21:26:02 -0400
+++ binutils-2.21.53-20110731/bfd/coff-x86_64.c	2011-12-19 02:34:35 -0500
@@ -619,7 +619,7 @@ coff_amd64_rtype_to_howto (bfd *abfd ATT
     {
       bfd_vma osect_vma;
 
-      if (h && (h->type == bfd_link_hash_defined || h->type == bfd_link_hash_defweak))
+      if (h && (h->root.type == bfd_link_hash_defined || h->root.type == bfd_link_hash_defweak))
 	osect_vma = h->root.u.def.section->output_section->vma;
       else
 	{
Only in binutils-2.21.53-20110731: build
Only in binutils-2.21.53-20110731/gas: a.out
diff -rup binutils-2.21.53-20110731.original//gas/config/tc-i386.c binutils-2.21.53-20110731/gas/config/tc-i386.c
--- binutils-2.21.53-20110731.original//gas/config/tc-i386.c	2011-07-22 16:22:35 -0400
+++ binutils-2.21.53-20110731/gas/config/tc-i386.c	2011-12-19 02:34:59 -0500
@@ -6681,6 +6681,105 @@ lex_got (enum bfd_reloc_code_real *rel,
 }
 #endif
 
+#ifdef TE_PE
+  #ifdef lex_got
+    #undef lex_got
+  #endif
+/* Parse operands of the form
+   <symbol>@SECREL32+<nnn>
+
+   If we find one, set up the correct relocation in RELOC and copy the
+   input string, minus the `@SECREL32' into a malloc'd buffer for
+   parsing by the calling routine.  Return this buffer, and if ADJUST
+   is non-null set it to the length of the string we removed from the
+   input line.  Otherwise return NULL.  
+   
+   This function is copied from the ELF version above adjusted for PE targets.
+   */
+static char *
+lex_got (enum bfd_reloc_code_real *rel ATTRIBUTE_UNUSED,
+	 int *adjust ATTRIBUTE_UNUSED,
+	 i386_operand_type *types ATTRIBUTE_UNUSED)
+{
+  static const struct {
+    const char *str;
+    int len;
+    const enum bfd_reloc_code_real rel[2];
+    const i386_operand_type types64;
+  } gotrel[] = {
+    { STRING_COMMA_LEN ("SECREL32"),    { BFD_RELOC_32_SECREL,
+				       BFD_RELOC_32_SECREL  },
+      OPERAND_TYPE_IMM32_32S_64_DISP32_64 },
+  };
+
+  char *cp;
+  unsigned j;
+
+  for (cp = input_line_pointer; *cp != '@'; cp++)
+    if (is_end_of_line[(unsigned char) *cp] || *cp == ',')
+      return NULL;
+
+  for (j = 0; j < ARRAY_SIZE (gotrel); j++)
+    {
+      int len = gotrel[j].len;
+      if (strncasecmp (cp + 1, gotrel[j].str, len) == 0)
+	{
+	  if (gotrel[j].rel[object_64bit] != 0)
+	    {
+	      int first, second;
+	      char *tmpbuf, *past_reloc;
+
+	      *rel = gotrel[j].rel[object_64bit];
+	      if (adjust)
+		*adjust = len;
+
+	      if (types)
+		{
+		  if (flag_code != CODE_64BIT)
+		    {
+		      types->bitfield.imm32 = 1;
+		      types->bitfield.disp32 = 1;
+		    }
+		  else
+		    *types = gotrel[j].types64;
+		}
+
+	      /* The length of the first part of our input line.  */
+	      first = cp - input_line_pointer;
+
+	      /* The second part goes from after the reloc token until
+		 (and including) an end_of_line char or comma.  */
+	      past_reloc = cp + 1 + len;
+	      cp = past_reloc;
+	      while (!is_end_of_line[(unsigned char) *cp] && *cp != ',')
+		++cp;
+	      second = cp + 1 - past_reloc;
+
+	      /* Allocate and copy string.  The trailing NUL shouldn't
+		 be necessary, but be safe.  */
+	      tmpbuf = (char *) xmalloc (first + second + 2);
+	      memcpy (tmpbuf, input_line_pointer, first);
+	      if (second != 0 && *past_reloc != ' ')
+		/* Replace the relocation token with ' ', so that
+		   errors like foo@SECLREL321 will be detected.  */
+		tmpbuf[first++] = ' ';
+	      memcpy (tmpbuf + first, past_reloc, second);
+	      tmpbuf[first + second] = '\0';
+	      return tmpbuf;
+	    }
+
+	  as_bad (_("@%s reloc is not supported with %d-bit output format"),
+		  gotrel[j].str, 1 << (5 + object_64bit));
+	  return NULL;
+	}
+    }
+
+  /* Might be a symbol version string.  Don't as_bad here.  */
+  return NULL;
+}
+#endif
+
+
 void
 x86_cons (expressionS *exp, int size)
 {
Only in binutils-2.21.53-20110731/gas: secrel.o
Only in binutils-2.21.53-20110731/gas: secrel.s
diff -rup binutils-2.21.53-20110731.original//ld/scripttempl/pe.sc binutils-2.21.53-20110731/ld/scripttempl/pe.sc
--- binutils-2.21.53-20110731.original//ld/scripttempl/pe.sc	2011-06-02 09:43:23 -0400
+++ binutils-2.21.53-20110731/ld/scripttempl/pe.sc	2011-12-04 12:08:55 -0500
@@ -39,9 +39,11 @@ if test "${RELOCATING}"; then
   R_CRT_XP='*(SORT(.CRT$XP*))  /* Pre-termination */'
   R_CRT_XT='*(SORT(.CRT$XT*))  /* Termination */'
   R_TLS='
+    *(.tls$AAA)    
     *(.tls)
     *(.tls$)
-    *(SORT(.tls$*))'
+    *(SORT(.tls$*))
+    *(.tls$ZZZ)'
   R_RSRC='*(SORT(.rsrc$*))'
 else
   R_TEXT=
@@ -178,6 +180,10 @@ SECTIONS
     ${RELOCATING+___crt_xt_end__ = . ;}
   }
 
+  /* Windows TLS expects .tls\$AAA to be at the start and .tls\$ZZZ to be
+     at the end of section.  This is important because _tls_start MUST
+     be at the beginning of the section to enable SECREL32 relocations with TLS
+     data. */
   .tls ${RELOCATING+BLOCK(__section_alignment__)} :
   { 					
     ${RELOCATING+___tls_start__ = . ;}
diff -rup binutils-2.21.53-20110731.original//ld/scripttempl/pep.sc binutils-2.21.53-20110731/ld/scripttempl/pep.sc
--- binutils-2.21.53-20110731.original//ld/scripttempl/pep.sc	2011-06-02 09:43:23 -0400
+++ binutils-2.21.53-20110731/ld/scripttempl/pep.sc	2011-12-04 12:08:44 -0500
@@ -39,9 +39,11 @@ if test "${RELOCATING}"; then
   R_CRT_XP='*(SORT(.CRT$XP*))  /* Pre-termination */'
   R_CRT_XT='*(SORT(.CRT$XT*))  /* Termination */'
   R_TLS='
+    *(.tls$AAA)    
     *(.tls)
     *(.tls$)
-    *(SORT(.tls$*))'
+    *(SORT(.tls$*))
+    *(.tls$ZZZ)'
   R_RSRC='*(SORT(.rsrc$*))'
 else
   R_TEXT=
@@ -184,6 +186,10 @@ SECTIONS
     ${RELOCATING+___crt_xt_end__ = . ;}
   }
 
+  /* Windows TLS expects .tls\$AAA to be at the start and .tls\$ZZZ to be
+     at the end of the .tls section.  This is important because _tls_start MUST
+     be at the beginning of the section to enable SECREL32 relocations with TLS
+     data. */
   .tls ${RELOCATING+BLOCK(__section_alignment__)} :
   { 					
     ${RELOCATING+___tls_start__ = . ;}
